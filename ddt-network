#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. ${DIR}/functions/common
. ${DIR}/functions/${os}_network

ddt_app_start \
    "DDT NETWORK CONFIGURATION" \
    "Turn your network on....or...off...."

# Configuration values
domain=ddt.develop
alias_ip_address=10.254.254.254
dns_ip_address=127.0.0.1
docker_image="christhomas/supervisord-dnsmasq"
name="ddt-dnsmasq"

function network_install_domain_supervisor_dnsmasq ()
{
    if [ ! $# -eq 3 ]; then ddt_app_error "The function '${FUNCNAME}' must be given 3 parameters, given '$#'"; fi
    if [ -z "$1" ]; then ddt_app_error "Must pass the container id name as the first parameter"; fi
    if [ -z "$2" ]; then ddt_app_error "Must pass the dns ip address as the second parameter"; fi
    if [ -z "$3" ]; then ddt_app_error "Must pass the domain name as the third parameter"; fi

    text "${blu}Installing domain:${end} ${yel}'$3'${end} with ip address ${yel}'$2'${end} into dnsmasq configuration in container id ${yel}'$1'${end}"

    docker exec -it $1 /bin/sh -c "echo 'address=/$3/$2' > /etc/dnsmasq.d/$3.conf"
    docker exec -it $1 kill -s SIGHUP 1

    sleep 2
}

function network_start_dns ()
{
    if [ -z "$1" ]; then ddt_app_error "Must pass the docker image name as the first parameter"; fi

    docker_image=$1

    network_stop_dns ${docker_image}

    text blu "Starting Supervisord DNSMasq..."

    if [ ! -z "$(docker container ls | grep ${name})" ]; then
        # first, remove the container that was previously built, cause otherwise it'll crash with "The container name /ddt-dnsmasq" is already in use by container "xxxx" and this stops that
        docker container rm ${name} >/dev/null
    fi

    docker run -d --name ${name} --restart=always -p 53:53/udp ${docker_image}:latest

    sleep 2
}

function network_stop_dns ()
{
    if [ -z "$1" ]; then ddt_app_error "Must pass the docker image name as the first parameter"; fi

    docker_image=$1

    # Stop any running container
    container_id=$(docker_running_id ${name})

    if [ ! -z "${container_id}" ]; then
        text blu "Stopping Supervisord DNSMasq container..."
        docker rm -f ${container_id} &>/dev/null
    fi

    # Remove any stopped container that will clash by name
    container_id=$(docker_container_id ${name})

    if [ ! -z "${container_id}" ]; then
        text blu "Removing old container..."
        docker container rm ${container_id} &>/dev/null
    fi
}

function test_ping ()
{
    if [ -z "$1" ]; then ddt_app_error "Must pass the ip or hostname of what should be pinged"; fi

    text blu "Lets test whether ping for '$1' works...."
    can_ping $1
}

function help ()
{
    text "${blu}DDT Network:${end} Configure all the things!"
    text "${yel}Usage Example:${end} ddt-network --start-dns"
    text "${blu}Note #1:${end} You can add the options in the sequence you want them to run"
    text "${blu}Note #2:${end} If you are using kubernetes, your port 53 will be pointing into the cluster, DO NOT USE --start/stop-local-dns functions, use --set/unset-local-dns instead"
    text "Options:"
    text "    --add-ip-alias: Add 10.254.254.254 as an ip alias for 127.0.0.1 (for those times you need to access your machine, but 127.0.0.1 is ambiguous)"
    text "    --remove-ip-alias: Remove 10.254.254.254 from your computer"
    text "    --add-dns: Set the DNS servers without configuring Supervisord-dnsmasq"
    text "    --remove-dns: Remove the DNS servers without configuring Supervisord-dnsmasq"
    text "    --start-dns: Setup the DNS servers and start Supervisord-dnsmasq"
    text "    --restart-dns: Restart the Supervisord-dnsmasq"
    text "    --stop-dns: Stop the DNS servers and start Supervisord-dnsmasq"
    text "    --add-domain=yourdomain.com: Add a domain to the running DNS server"
    text "    --logs: View the logs from the DNSMasq container"
    text "    --logs-f: View and follow the logs from the DNSMasq container"
    text "    --domains: View a list of all the domains that are registered with the DNSMasq server"
    text " "

    ddt_app_error "No parameters given"
}

for i in "${@:1}"; do
    case $i in
        --add-ip-alias)
            network_add_ip_alias ${alias_ip_address}
            test_ping ${alias_ip_address}
        ;;

        --remove-ip-alias)
            network_remove_ip_alias ${alias_ip_address}
            test_ping ${alias_ip_address}
        ;;

        --add-dns)
            network_setup_dns ${dns_ip_address}
        ;;

        --remove-dns)
            network_remove_dns ${dns_ip_address}
        ;;

        --start-dns)
            text "${blu}Docker:${end} Pulling '${docker_image}' before changing the dns"
	        docker pull $docker_image

	        ddt-network --add-dns

            network_start_dns ${docker_image}

            ddt-network --add-domain=ddt.develop
        ;;

        --stop-dns)
            network_stop_dns ${docker_image}

            ddt-network --remove-dns

            test_ping google.com
            test_ping ${domain}
        ;;

        --restart-dns)
            ddt-network --stop-dns
            ddt-network --start-dns
        ;;

        --add-domain=*)
            domain=${i#*=}

            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The Local DNS Container '${docker_image}' is not running, cannot execute request"
                ddt_app_error "Exiting..."
            fi

            network_install_domain_supervisor_dnsmasq ${container_id} ${alias_ip_address} ${domain}

            test_ping google.com
            test_ping ${domain}
        ;;

        --logs)
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The Local DNS Container '${docker_image}' is not running, cannot execute request"
                ddt_app_error "Exiting..."
            fi

            docker logs ${container_id}
        ;;

        --logs-f)
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The Local DNS Container '${docker_image}' is not running, cannot execute request"
                ddt_app_error "Exiting..."
            fi

            docker logs -f ${container_id}
        ;;

        --domains)
            text blu Domains that are registered in the dns container:
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The Local DNS Container '${docker_image}' is not running, cannot execute request"
                ddt_app_error "Exiting..."
            fi

            mapping_list=(" Domains'|'IP Address*")
            for file in $(docker exec -it ${container_id} find /etc/dnsmasq.d -name "*.conf" -type f); do
                file=$(echo ${file} | tr -d '\r')
                file=$(docker exec -it ${container_id} cat ${file})
                domain=$(echo ${file} | cut -d/ -f2)
                ip_address=$(echo ${file} | cut -d/ -f3)

                mapping_list+=("${domain}'|'${ip_address}*")
            done
            echo "${mapping_list[@]}" | tr '*' '\n' | column -t -s"'"
        ;;

        --help|*)
            help
        ;;
    esac
done

if [ $# -eq 0 ]; then help; fi