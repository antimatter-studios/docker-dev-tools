#!/usr/bin/env php
<?php
$showErrors = true;
$cli = require_once(__DIR__.'/../src/init.php');
Execute::setDebug($cli->hasArg('debug'));

$config = new Config();

Script::title("DDT LOCAL IP CONFIGURATOR", "A Stable IP Address makes a happy network");

function help(CLI $cli, $alias) {
    $script = $cli->getScript(false);

    Text::print(<<<EOF
    {yel}Usage Example:{end} $script {yel}--set=$alias --get --add --remove --reset{end}

    {blu}Description:{end}
        This tool creates an alias for {yel}localhost{end}/{yel}127.0.0.1{end} on your machine which is 
        addressable from your local machine and from inside docker containers. This is useful when wanting 
        to connect xdebug from your software running inside a container, to your local machine where your 
        IDE Is listening for incoming connections
        
    {blu}Options:{end}
        --set=xxx: Add an IP Address to your configuration stack, this value will be remembered and used in the future
        --get: Get the Currently configured IP Address.
        --add: Add {yel}$alias{end} as an ip alias for {yel}127.0.0.1{end}
        --remove: Remove {yel}$alias{end} from your computer
        --reset: Remove and Add the configuration again, just in case it broke somehow
        
    {blu}Notes:{end}
        Please don't use {yel}localhost{end} or {yel}127.0.0.1{end}
        
        The problem is that inside a docker container, {yel}localhost{end} resolves to itself 
        and {yel}127.0.0.1{end} also. This means you have no ip address which is addressable 
        from your local machine, or inside docker containers.
        

    EOF
    );

    exit(0);
}

$ipAddress = new IPAddress($config);
$alias = $ipAddress->get();

if($cli->hasArg('help') || $cli->countArgs() === 0){
    help($cli, $alias);
}

if($cli->hasArg('get')){
    Text::print("IP Address: '{yel}$alias{end}'\n");
}

if($newIpAddress = $cli->getArgWithVal('set')){
    Text::print("Writing IP Address '{yel}$newIpAddress{end}': ");

    if($ipAddress->set($newIpAddress)){
        Text::print("{grn}SUCCESS{end}\n");
    }else{
        Text::print("{red}FAILURE{end}\n");
        exit(1);
    }
}

if($cli->hasArg('add')){
	Text::print("Installing IP Address '{yel}$alias{end}': ");
    $status = $ipAddress->install();
    $cli->setArg('ping', true);

	if($status === true){
		Text::print("{grn}SUCCESS{end}\n");
	}else{
		Text::print("{red}FAILURE{end}\n");
		Script::failure();
	}
}

if($cli->hasArg('remove')){
	Text::print("Uninstalling IP Address '{yel}$alias{end}': ");
	$status = $ipAddress->uninstall();
	$cli->setArg('ping', false);

	if($status === true){
		Text::print("{grn}SUCCESS{end}\n");
	}else{
		Text::print("{red}FAILURE{end}\n");
		Script::failure();
	}
}

if($cli->hasArg('reset')){
    Text::print("{blu}Resetting IP Address:{end}\n");

    Text::print("\t{blu}Uninstalling:{end} ");
    $result = $ipAddress->uninstall() ? "{grn}success{end}" : "{red}failure{end}";
    Text::print("$result\n");

    Text::print("\t{blu}Installing:{end} ");
    $result = $ipAddress->install() ? "{grn}success{end}" : "{red}failure{end}";
	Text::print("$result\n");
}

if($wantedResult = $cli->getArg('ping') !== null){
	$result = $ipAddress->ping();

	Format::ping($ipAddress->ping());
}

exit(0);
