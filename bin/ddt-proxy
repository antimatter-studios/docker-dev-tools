#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. ${DIR}/../functions/common

read_config ${DIR}/../.env

tool_start \
    "${proxy_tool_name}" \
    "Reverse proxy for all docker compose applications"

docker_image="christhomas/nginx-proxy:alpine"
network_name=${proxy_network_name}
name=${proxy_container_name}

function help ()
{
    text "Running Help:"
    text "${blu}${proxy_tool_name}:${end} (club bouncer says) if your names not down, you're not coming in"
    text "${yel}Usage:${end} ${self} --start"
    text "Options:"
    text "    --start[=XXX]: Run the Nginx proxy, with an optional assignment for the network name to use"
    text "    --stop: Stop the Nginx proxy"
    text "    --restart: Does a restart (just --stop && --start after each other)"
    text "    --config: Output the raw /etc/nginx/conf.d/default.conf which is generated when containers start and stop"
    text "    --add-network=XXX: Add a new network to a running proxy without needing to restart it"
    text "    --logs: View the logs from the Nginx proxy container"
    text "    --logs-f: View and follow the logs from the Nginx proxy container"
    text "    --domains: Show the domains that the Nginx proxy will respond to"
    text "    --networks: Show the list of networks that the Nginx proxy is operating on"

    tool_fatal_error "Missing command, choose from one of the above commands"
}

function print_running_containers ()
{
    text blu Running containers:
    docker ps
}

function get_network_id ()
{
    if [ -z "$1" ]; then tool_fatal_error "You must pass the name of the network as the first parameter"; fi

    docker network ls | grep "$1" | awk '{ print $1 }'
}

function create_network ()
{
    if [ -z "$1" ]; then tool_fatal_error "You must pass the name of the network as the first parameter"; fi

    network_id=$(get_network_id $1)

    # Create the ddt proxy network if it isn't already created
    if [[ -z "$network_id" ]]; then
        network_id=$(docker network create $1)
        text "${blu}Create proxy network:${end} $1 (id: ${network_id})"
    fi
}

function start_proxy ()
{
    if [ -z "$1" ]; then tool_fatal_error "You must pass the name of the proxy docker image as the first parameter"; fi
    if [ -z "$2" ]; then tool_fatal_error "You must pass the name of the network to run the proxy on as the second parameter"; fi

    network=$2

    # Create the network to bind all the containers onto
    docker_create_network ${network}

    # Run the proxy container
    container_id=$(docker_running_id $1)

    if [[ ! -z "${container_id}" ]]; then
        stop_proxy $1 ${container_id}
    fi
    
    text "${blu}Starting the nginx proxy container:${end} $1..."

    docker container prune -f

    if [ ! -z "$(docker container ls | grep ${name})" ]; then
        # first, remove the container that was previously built, cause otherwise it'll crash with "The container name /xxx" is already in use by container "xxxx" and this stops that
        text "Deleting container: \c"
        docker container rm ${name} 2>&1
        docker rm ${name} 2>&1
    fi

    container_id=$( \
        docker run -d --restart always \
        --name ${name} \
        -p 80:80 \
        -p 443:443 \
        -v /var/run/docker.sock:/tmp/docker.sock:ro \
        -v ${DIR}/proxy-config/global.conf:/etc/nginx/conf.d/global.conf \
        -v ${DIR}/proxy-config/nginx-proxy.conf:/etc/nginx/proxy.conf \
        $1 \
    )
    text "Running '${name}', container id: ${container_id}"

    network=$(csv_to_array ${network});
    for n in ${network[@]}; do
      text "Connecting container '${container_id}' to network '${n}'"
      docker network connect ${n} ${container_id}
    done

    if [ -z "${container_id}" ]; then
        textbox red wht "The container ${name} did not start correctly"
        tool_fatal_error "Exiting..."
    fi
}

function stop_proxy ()
{
    if [ -z "$1" ]; then tool_fatal_error "You must pass the docker image as the first parameter"; fi
    if [ -z "$2" ]; then tool_fatal_error "You must pass the container id as the second parameter in order to stop it"; fi

    text "${blu}Stopping the nginx proxy container:${end} $1..."
    
    docker kill $2 &>/dev/null
    docker rm -f $2 &>/dev/null

    # we don't delete the network since there is no real reason to want to do this
    # just leave it and reuse it when necessary
}

function get_networks ()
{
    networks=$(docker_container_networks ${name})
    # we don't count the bridge network when performing this action
    networks=$(echo ${networks} | sed s/bridge// | xargs)

    if [ "$1" == "no-pretty" ]; then
        echo ${networks}
    elif [ "$1" == "csv" ]; then
        echo "$(space_sep_to_csv ${networks})"
    else
        for n in ${networks}; do
            text "${blu}Network${end}: ${n}"
        done
    fi
}

for i in "${@:1}"; do
    case $i in
        --networks|--networks=*)
            [ "${i#*=}" != "--networks" ] && option=${i#*=}

            get_networks ${option}
        ;;

        --start|--start=*)
            [ "${i#*=}" != "--start" ] && network_name=${i#*=}

            start_proxy ${docker_image} ${network_name}

            print_running_containers
            ${self} --domains
        ;;

        --stop)
            container_id=$(docker_running_id ${name})

            if [ ! -z "${container_id}" ]; then
                stop_proxy ${docker_image} ${name}
            else
                textbox yel blk Status: Already stopped
            fi

            print_running_containers
        ;;

        --restart)
            network_name=$(${self} --networks=csv | awk '{if(NR>0)print}')

            ${self} --stop
            ${self} --start=${network_name}
        ;;

        --logs)
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The nginx proxy (${docker_image}) is not running, cannot execute request"
                tool_fatal_error "Exiting..."
            fi

            docker logs ${container_id}
        ;;

        --logs-f)
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The nginx proxy (${docker_image}) is not running, cannot execute request"
                tool_fatal_error "Exiting..."
            fi

            docker logs -f ${container_id}
        ;;

        --domains)
            text blu Domains that are registered in the nginx proxy:
            container_id=$(docker_running_id ${docker_image})

            if [ -z "${container_id}" ]; then
                textbox red wht "The nginx proxy (${docker_image}) is not running, cannot execute request"
                tool_fatal_error "Exiting..."
            fi

            get_networks ${option}

            container_list=$(docker exec -it ${container_id} cat /etc/nginx/conf.d/default.conf | grep "upstream" | awk '{ print $2 }')

            mapping_list=(" Container ID'|'Virtual Host'|'Path*")
            for name in ${container_list}; do
                   domain=$(docker inspect ${name} -f '{{range .Config.Env}}{{println .}}{{end}}' | grep VIRTUAL_HOST)
                   domain=$([ ! -z ${domain} ] && echo ${domain} | sed "s/VIRTUAL_HOST=//g")

                   path=$(docker inspect ${name} -f '{{range .Config.Env}}{{println .}}{{end}}' | grep VIRTUAL_PATH)
                   path=$([ ! -z ${path} ] && echo ${path} | sed "s/VIRTUAL_PATH=//g")

                   port=$(docker inspect ${name} -f '{{range .Config.Env}}{{println .}}{{end}}' | grep VIRTUAL_PORT)
                   port=$([ ! -z ${port} ] && echo ":${port}" | sed "s/VIRTUAL_PORT=//g")

                   mapping_list+=("${name}'|'${domain}${port}'|'${path}*")
            done
            echo "${mapping_list[@]}" | tr '*' '\n' | column -t -s"'"
        ;;

        --config)
            container_id=$(docker_running_id ${docker_image})

            docker exec -it ${container_id} cat /etc/nginx/conf.d/default.conf
        ;;

        --add-network=*)
            network=${i#*=}
            text blu "Connecting a new network '${network}' to the proxy"

            container_id=$(docker_running_id ${docker_image})

            exists=$(docker network ls | grep ${network})
            [ -z "${exists}" ] && docker network create ${network}

            docker network connect ${network} ${container_id}

            get_networks
        ;;

        --help)
            help
        ;;
    esac
done

if [ $# -eq 0 ]; then
    help
fi
