#!/usr/bin/env php
<?php declare(strict_types=1);
$showErrors = true;
$cli = require_once(__DIR__.'/../src/init.php');

$config = new Config();
$docker = new Docker($config);
$proxy = new Proxy($config, $docker);

Script::title("NGINX Frontend Proxy", "(club bouncer says) if your names not down, you're not coming in");

if(Shell::isCommand('docker') === false){
	Script::failure("Docker is required to run this tool, please install it");
}

function help(CLI $cli)
{
	$script = $cli->getScript(false);

	Text::print(<<<EOF
    {yel}Usage Example:{end} $script {yel}--start --restart --stop{end}

    {blu}Description:{end}
        Here some nice text

    {blu}Options:{end}
        {cyn}Running of the NGINX Front End Proxy Container:{end}
        --start[=XXX]: Run the Nginx proxy, with an optional assignment for the network name to use
        --stop: Stop the Nginx proxy
        --restart: Does a restart (just --stop && --start after each other)
        
        {cyn}Logging:{end}
        --logs: View the logs from the Nginx proxy container
        --logs-f: View and follow the logs from the Nginx proxy container
        
        {cyn}Network Configuration:{end}
        --networks: Show the list of networks that the Nginx proxy is operating on
        --add-network=XXX: Add a new network to a running proxy without needing to restart it
        --remove-network=XXX: Remove an existing network from the proxy container so it stops monitoring it
        
        {cyn}Configuration:{end}
        --config: Output the raw /etc/nginx/conf.d/default.conf which is generated when containers start and stop
        --domains: Show the domains that the Nginx proxy will respond to
        --set-container-name: Set the name to give to this container
        --get-container-name: Return the configured container name
        --set-docker-image: Set the docker image name to run
        --get-docker-image: Return the configured docker image name


EOF
    );

	exit(0);
}

if($cli->hasArg('help') || $cli->countArgs() === 0){
    help($cli);
}

if($cli->hasArg('restart')){
    $cli->setArg('stop');
    $cli->setArg('start');
}

if($cli->hasArg('stop')){
    if($proxy->isRunning()){
		Text::print("{blu}Stopping the Frontend Proxy:{end} ".$proxy->getDockerImage()."\n");

        $proxy->stop();

		Text::print("{blu}Running Containers{end}\n");
		Shell::passthru('docker ps');
    }else{
        Text::print(Text::box("Status: Already Stopped", 'blk', 'yel'));
    }
}

if($network = $cli->getArg('start')){
    if($network == true) $network = null;

    if(!$proxy->isRunning()){
		Text::print("{blu}Starting the Frontend Proxy:{end} ".$proxy->getDockerImage()."\n");

		$proxy->start($network);

		Text::print("{blu}Running Containers{end}\n");
		Shell::passthru('docker ps');

		$cli->setArg('domains');
    }else{
		Text::print(Text::box("Status: Already Started", 'blk', 'yel'));
    }
}

if($cli->hasArg('config')){
    if($proxy->isRunning()){
        print($proxy->getConfig());
    }else{
		Script::failure("There is no proxy container running");
    }
}

if($network = $cli->getArgWithVal('add-network')){
    Text::print("{blu}Connecting to a new network '$network' to the proxy{end}\n");

    if($proxy->isRunning()){
        $proxy->addNetwork($network);
		Format::networkList($proxy->getNetworks());
    }else{
		Script::failure("There is no proxy container running");
    }
}

if($network = $cli->getArgWithVal('remove-network')){
	Text::print("{blu}Disconnecting the network '$network' from the proxy{end}\n");

	if($proxy->isRunning()){
		$proxy->removeNetwork($network);
		Format::networkList($proxy->getNetworks());
	}else{
		Script::failure("There is no proxy container running");
	}
}

if($cli->hasArg('logs')){
	if($proxy->isRunning()){
		$proxy->logs();
	}else{
		Script::failure("There is no proxy container running");
	}
}

if($cli->hasArg('logs-f')){
    if($proxy->isRunning()){
		$proxy->logsFollow();
    }else{
		Script::failure("There is no proxy container running");
    }
}

if($cli->hasArg('domains')){
    if($proxy->isRunning()){
		Format::networkList($proxy->getListeningNetworks());
		Format::upstreamList($proxy->getUpstreams());
    }else{
		Script::failure("There is no proxy container running");
    }
}

if($format = $cli->getArg('networks')){
    Format::networkList($proxy->getListeningNetworks(), $format);
}

if($containerName = $cli->getArgWithVal('set-container-name')){
	$proxy->setContainerName($containerName);
}

if($cli->hasArg('get-container-name')){
	Text::print("Container: ".$proxy->getContainerName()."\n");
}

if($dockerImage = $cli->getArgWithVal('set-docker-image')){
	$proxy->setDockerImage($dockerImage);
}

if($cli->hasArg('get-docker-image')){
	Text::print("Docker Image: ".$proxy->getDockerImage()."\n");
}
