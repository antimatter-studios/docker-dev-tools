#!/usr/bin/env php
<?php declare(strict_types=1);
$cli = require_once(__DIR__.'/../src/init.php');

Script::title("DDT DOCKER", "Configure docker profiles and easily interface with remote docker daemons");

try{
    $config = new SystemConfig();
    $docker = new Docker($config);
}catch(DockerNotRunningException $e){
    Script::failure($e->getMessage());
}catch(DockerMissingException $e){
    Script::failure($e->getMessage());
}

function help(CLI $cli)
{
	$script = $cli->getScript(false);

	Text::print(<<<EOF
    {yel}Usage Examples: {end}
        $script --add-profile=staging --host=mycompany.com --port=2376 --tlscacert=cacert.pem --tlscert=cert.pem --tlskey=key.pem
        $script --remove-profile=staging
        $script --get-profile=staging
        $script --list-profiles
        $script --profile=staging exec -it phpfpm sh
        
    {blu}Description:{end}
        This tool will manage the configured docker execution profiles that you can use in other tools.
        Primarily the tool was created for the purpose of wrapping up and simplifying the ability to
        execute docker commands on other docker servers hosted elsewhere. 
        
        These profiles contain connection information to those remote docker profiles and make it 
        easy to integrate working with those remote servers into other tools without spreading
        the connection information into various places throughout your custom toolsets

    {blu}Options:{end}
        {cyn}Managing Profiles{end}
        --add-profile=xxx: The name of the profile to create
        --remove-profile=xxx: The name of the profile to remove
        --list-profile(s): List all the registered profiles

        --host=xxx: The host of the docker server (or IP Address)
        --port=xxx: The port, when using TLS, it must be 2376
        --tlscacert=xxx: The filename of this tls cacert (cacert, not cert)
        --tlscert=xxx: The filename of the tls cert
        --tlskey=xxx: The filename of the tls key        
              
        {cyn}Using Profiles{end}
        --get-json=xxx: To obtain a profile as a JSON string
        --profile=xxx: To execute a command using this profile (all following arguments are sent directly to docker executable without modification

    {blue}Notes:{end}
        The parameter {yel}--add-profile{end} depends on: {yel}host, port, tlscacert, tlscert, tlskey{end} options
        and unfortunately you can't create a profile without all of those paraameters at the moment
        
        If you don't pass a profile to execute under, it'll default to your local docker server. Which means you can use this
        tool as a wrapper and optionally pass commands to various dockers by just adjusting the command parameters and 
        adding the {yel}--profile=staging{end} or not


EOF
    );

	exit(0);
}

if($cli->hasArg('help') || $cli->countArgs() === 0){
    help($cli);
}

if(($profile = $cli->getArgWithVal('add-profile')) !== null){
    $host       = $cli->getArgWithVal('host');
    $port       = $cli->getArgWithVal('port');
    $tlscacert  = $cli->getArgWithVal('tlscacert');
    $tlscert    = $cli->getArgWithVal('tlscert');
    $tlskey     = $cli->getArgWithVal('tlskey');

    if($docker->addProfile($profile, $host, (int)$port, $tlscacert, $tlscert, $tlskey)){
        Script::success("Profile '$profile' written successfully");
    }else{
		Script::failure("Profile '$profile' did not write successfully");
    }
}

if(($profile = $cli->getArgWithVal('remove-profile')) !== null){
    if($docker->removeProfile($profile)){
        Script::success("Profile '$profile' was removed successfully");
    }else{
		Script::failure("Profile '$profile' did not remove successfully");
    }
}

if($cli->hasArg(['list-profile', 'list-profiles'])){
    $profileList = $docker->listProfiles();

    Text::print("{blu}Docker Profiles:{end}\n");
    foreach(array_keys($profileList) as $name){
        Text::print(" - $name\n");
    }
    if(empty($profileList)){
        Text::print("There are no registered docker profiles\n");
    }

    exit(0);
}

if(($profile = $cli->getArgWithVal('get-json')) !== null){
	$json = (string)$docker->getProfile($profile);
	if($json !== null){
		die($json."\n");
	}else{
		Script::failure("Profile '$profile' was not found or could not be decoded");
	}
}

if(($profile = $cli->getArgWithVal('profile')) !== null){
    if($docker->useProfile($profile) === false){
        Script::failure("Profile '$profile' did not exist");
    }
}
$args = $cli->getArgList(true);
unset($args['--profile']);

try{
    $docker->passthru(implode(" ", $args));
}catch(Exception $e){
    exit(1);
}
