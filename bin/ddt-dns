#!/usr/bin/env php
<?php declare(strict_types=1);
$cli = require_once(__DIR__.'/../src/init.php');

$config = new Config();
$docker = new Docker($config);
$dns = new DNSMasq($config, $docker);
$alias = new IPAddress($config);

Script::title("DNS Server", "Turn your network on....or...off....");

function help(CLI $cli)
{
	$script = $cli->getScript(false);

	Text::print(<<<EOF
    {yel}Usage Example:{end} $script {yel}--start --restart --stop{end}

    {blu}Description:{end}
        This tool will start a docker container and listen on DNS Port 53 and handle
        requests for your local development networks. Whilst pushing upstream all
        other requests it can't resolve to an online DNS server

    {blu}Options:{end}
        {cyn}Toggling the DNS Server:{end}
        --enable: Enable the DNS Server
        --disable: Disable the DNS Server
        --reset: Toggles the DNS Server as disabled, enableds
        
        {cyn}Running of the DNS Server Container:{end}
        --start: Setup the DNS servers and start the DNS container
        --restart: Restart the DNS Container
        --stop: Stop the DNS container
        
        {cyn}Adding extra domains to your configuration:{end}
        --add-domain=yourdomain.com: Add a domain to the running DNS server
        --remove-domain=yourdomain.com: Remove a domain to the running DNS server (see also --ip-address)
        --ip-address=xxx.xxx.xxx.xxx: Use this ip address when configuring the server instead of the default one
        
        {cyn}Logging:{end}
        --logs: View the logs from the DNS container
        --logs-f: View and follow the logs from the DNS container
        
        {cyn}Configuration:{end}
        --domains: View a list of all the domains that are registered with the DNS server
        --set-container-name: Set the name to give to this container
        --get-container-name: Return the configured container name
        --set-docker-image: Set the docker image name to run
        --get-docker-image: Return the configured docker image name
     
    {blu}Notes:{end}
        {yel}Enabling, disable, and resetting{end} the DNS Server doesn't change the running status of the 
        DNS Container. It's just changing your system configuration from using the DNS Server or 
        going back to your default computer DNS settings. It's useful when you need to quickly toggle back 
        to the system defaults because the DNS Server might interfere with running a VPN. So you can quickly 
        disable it, do your other work. Then re-enable it when you need to get back to working with the 
        development environment. It's like a soft reset of your DNS configuration so you can temporarily 
        do something.
        
        {yel}Starting, Stopping, and Restarting{end} implies also {yel}enabling and disabling{end} the 
        DNS Server like explained above. However it does the extra step of Starting or Stopping the 
        docker container as well. So it's more like a hard reset.


EOF
    );

	exit(0);
}

if($cli->hasArg('help') || $cli->countArgs() === 0){
    help($cli);
}

if($cli->hasArg('enable')){
	$dns->enable();
}

if($cli->hasArg('disable')){
	$dns->disable();
}

if($cli->hasArg('restart')){
    $cli->setArg('stop');
    $cli->setArg('start');
}

if($cli->hasArg('stop')){
    Text::print("{blu}Stopping DNS Container...{end}\n");
    $dns->disable();

    Format::ping($alias->ping('127.0.0.1'));
    Format::ping($alias->ping('google.com'));

    $domainList = $dns->listDomains();
    foreach($domainList as $domain){
        Format::ping($alias->ping($domain['domain'], $domain['ip_address']));
    }

	$dns->stop();
}

if($cli->hasArg('start')){
	Text::print("{blu}Starting DNS Container...{end}\n");

	try{
		$dns->start();
    }catch(UnsupportedDistroException $e){
        Script::failure("This version of linux was not supported, version installed: ".$e->getMessage());
    }

	Format::ping($alias->ping('127.0.0.1'));
	Format::ping($alias->ping('google.com'));

	// Configure all the domains to be resolved on this computer
	$domainList = $dns->listDomains();
	foreach($domainList as $domain){
		$dns->addDomain($alias->get(), $domain['domain']);
		Format::ping($alias->ping($domain['domain'], $domain['ip_address']));
	}
}

if($cli->hasArg('logs')){
    if(!$dns->logs()){
		Script::failure("DNS Container could not be found");
    }
}

if($cli->hasArg('logs-f')){
	if(!$dns->logsFollow()){
		Script::failure("DNS Container could not be found");
	}
}

if($cli->hasArg('domains')){
    Text::print("{blu}Domains that are registered in the dns container:{end}\n");

    $domainList = $dns->listDomains(true);

    $table = new TextTable();
    $table->setRightPadding(10);
    $table->addRow(['Domain', 'IP Address']);
    foreach($domainList as $domain){
        $table->addRow([$domain['domain'], $domain['ip_address']]);
    }
    $table->render();
}

if($domain = $cli->getArgWithVal('add-domain'))
{
	$ipAddress = $cli->getArgWithVal('ip-address', $alias->get());

	if($ipAddress !== $alias->get()){
		Text::print("{blu}Overriding IP Alias:{end} '{yel}" . $alias->get() . "{end}' with custom IP Address '{yel}$ipAddress{end}'\n\n");
    }

	if($dns->addDomain($ipAddress, $domain)){
        Format::ping($alias->ping('google.com'));
        Format::ping($alias->ping($domain, $ipAddress));
    }else{
        Script::failure("DNS Container could not be found");
    }
}

if($domain = $cli->getArgWithVal('remove-domain'))
{
    if($dns->removeDomain($domain)){
        Format::ping($alias->ping('google.com'));
        Format::ping($alias->ping($domain));
    }else{
        Script::failure("DNS Container could not be found");
    }
}

if($containerName = $cli->getArgWithVal('set-container-name')){
    $dns->setContainerName($containerName);
}

if($cli->hasArg('get-container-name')){
    Text::print("Container: ".$dns->getContainerName()."\n");
}

if($dockerImage = $cli->getArgWithVal('set-docker-image')){
    $dns->setDockerImage($dockerImage);
}

if($cli->hasArg('get-docker-image')){
	Text::print("Docker Image: ".$dns->getDockerImage()."\n");
}
