#!/usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/../functions/common

read_config ${DIR}/../.env

tool_start \
    "DDT PHP COMPOSER" \
    "PHP Composer in a container!"

function help ()
{
    text "Usage: ddt-php-composer --project=../api-server --no-defaults --delete-vendor --composer-cache=false --command=update|install|require -vvv"
    text "    --project: The location of the composer project to work on. Default: '${PWD}'. Using: '${project}'"
    text "    --composer-cache: The value true or false to enable or disable this caching docker volume. Default: true. Using: ${composer_cache}"
    text "    --delete-vendor: Whether or not to delete the vendor folder, pass true or false. Default: false. Using: ${delete_vendor}"
    text "    --no-defaults: To optionally turn off the install|update|require default parameters documented below. Default: false. Using ${no_defaults}"
    text "    --production: To enable the production options to optimise and lock the autoloader to only compiled classes. Defaults: false. Using ${production}"
    text "    --no-prestissimo: To disable prestissimo composer plugin and install without it's help. Defaults: enabled"
    text "    --no-defaults: Whether or not to use the defaults for the composer command requested, see notes for information"
    text "    --command: the arguments to pass to composer when run in a container. It must be the last parameter, all following parameters are passed directly to composer"
    text "    --install: a shortcut for --command=install. Will install composer from lock"
    text "    --update: a shortcut for --command=update. Will upgrade all the packages and write a new lock"
    text "    --remove: a shortcut for --command=remove. Will remove a specific package given as an argument"
    text "    --require: a shortcut for --command=require. Will add a new package given as an argument to the composer setup"
    text "    --debug: shows the final set of commands to execute and will introduce timing into each stage"
    text "    --help: This help information"
    text " "
    text "Note #1: --command=(install|update|require|remove|require) automatically apply the following parameters: "
    text "         Params: --prefer-dist --no-progress --no-suggest --ignore-platform-reqs"
    text "Note #2: --production=true enables the following options: "
    text "         Params: --classmap-authoritative --optimize-autoloader"

    if [ ! -z "$1" ]; then text red $1; fi

    exit 0
}

if [ $# -eq 0 ]; then help; fi

project=${PWD}
debug=false
time_cmd=
has_command=false
delete_vendor=false
composer_cache=true
no_defaults=false
production=false
default_opts="--prefer-dist --no-progress --no-suggest"
default_install_opts="--working-dir=/app --ignore-platform-reqs"
prestissimo_command="/usr/bin/composer global require hirak/prestissimo ${default_opts}"

for i in "$@"; do
    case $i in
        --project=*)
            project=${i#*=}

            if [ "${has_command}" = "true" ]; then
                help "You cannot put --project AFTER the --command parameter"
            fi

            shift
        ;;

        --composer-cache=false)
            composer_cache=${i#*=}
            if [ "${has_command}" = "true" ]; then
                help "You cannot put --composer-cache AFTER the --command parameter"
            fi

            shift
        ;;

        --disable-cache)
            composer_cache=false
            shift
        ;;

        --delete-vendor)
            delete_vendor=true

            if [ "${has_command}" = "true" ]; then
                help "You cannot put --delete-vendor AFTER the --command parameter"
            fi

            shift
        ;;

        --production)
            production=true
            default_opts="${default_opts} --classmap-authoritative --optimize-autoloader"
            shift
        ;;

        --no-prestissimo)
            prestissimo_command="true"
            shift
        ;;

        --no-defaults)
            no_defaults=true
            shift
        ;;

        --command=*)
            has_command=true
            shift
            command="${i#*=} $@"
        ;;

        --install)
            has_command=true
            shift
            command="install $@"
        ;;

        --update)
            has_command=true
            shift
            command="update $@"
        ;;

        --remove=*)
            has_command=true
            shift
            command="remove ${i#*=} $@"
        ;;

        --require=*)
            has_command=true
            shift
            command="require ${i#*=} $@"
        ;;

        --debug)
            debug=true
            time_cmd=time
            shift
        ;;

        --help)
            help
        ;;
    esac
done

project=$(ddt_realpath ${project})
if [ ! -d "${project}" ] || [ ! -f "${project}/composer.json" ]; then
    help "This is not a composer project directory. Directory was: ${project}"
fi

if [ -z "${command}" ]; then
    help "The command parameter was missing"
fi

text "${blu}Project Directory:${end} ${yel}${project}${end}"

if [ "${delete_vendor}" = "true" ]; then
    text "${blu}Composer Vendor Folder:${end} ${yel}Deleted${end}"
    rm -rf ${project}/vendor
fi

if [ "${no_defaults}" = "false" ] ; then
    for arg in ${command}; do
        case "${arg}" in
            install|update|require)
                command="${command} ${default_install_opts} ${default_opts}"
            ;;

            remove)
                command="${command} ${default_install_opts}"
            ;;
        esac
    done;
fi

volume_name="ddt_tool_composer_cache"
if [ -z "$(docker volume ls | grep ${volume_name})" ]; then
    text "${blu}Docker Volume:${end} Created '${volume_name}'"
    docker volume create ${volume_name}
fi

composer_volumes="-v ${project}:/app:delegated"
if [ "${composer_cache}" = "true" ]; then
    text "${blu}Composer Cache:${end} ${yel}Enabled${end}"
    composer_volumes="${composer_volumes} -v ${volume_name}:/tmp:delegated"
else
    text "${blu}Composer Cache:${end} ${yel}Disabled${end}"
fi

composer_command="php -d memory_limit=-1 /usr/bin/composer ${command}"
chown_command="chown -R $(id -u):$(id -g) /app/vendor"
final_command="${time_cmd} ${prestissimo_command} && ${time_cmd} ${composer_command} && ${time_cmd} ${chown_command}"

if [ "${debug}" = "true" ]; then
    text yel "Final Command: ${final_command}"
fi

text "${blu}Composer Command:${end} ${yel}'/usr/bin/composer ${command}'${end}"
COMPOSER_PROCESS_TIMEOUT=2000 ${time_cmd} docker run --rm \
    -v $HOME/.ssh:/root/.ssh \
    ${composer_volumes} \
    --entrypoint "sh" composer \
    -c "${final_command}"
