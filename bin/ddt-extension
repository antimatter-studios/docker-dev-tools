#!/usr/bin/env php
<?php declare(strict_types=1);
$showErrors = true;
$cli = require_once(__DIR__.'/../src/init.php');

$config = new Config();

Script::title("DDT EXTENSION CONFIGURATOR", "Install new Batteries");

function help(CLI $cli, $alias) {
    $script = $cli->getScript(false);

    Text::print(<<<EOF
    {yel}Usage Example:{end} $script {yel}--set=$alias --get --add --remove --reset{end}

    {blu}Description:{end}
        This tool creates an alias for {yel}localhost{end}/{yel}127.0.0.1{end} on your machine which is 
        addressable from your local machine and from inside docker containers. This is useful when wanting 
        to connect xdebug from your software running inside a container, to your local machine where your 
        IDE Is listening for incoming connections
        
    {blu}Options:{end}
        --set=xxx: Add an IP Address to your configuration stack, this value will be remembered and used in the future
        --get: Get the Currently configured IP Address.
        --add: Add {yel}$alias{end} as an ip alias for {yel}127.0.0.1{end}
        --remove: Remove {yel}$alias{end} from your computer
        --reset: Remove and Add the configuration again, just in case it broke somehow
        
    {blu}Notes:{end}
        Please don't use {yel}localhost{end} or {yel}127.0.0.1{end}
        
        The problem is that inside a docker container, {yel}localhost{end} resolves to itself 
        and {yel}127.0.0.1{end} also. This means you have no ip address which is addressable 
        from your local machine, or inside docker containers.
        

EOF
    );

    exit(0);
}

$name   = $cli->getArgWithVal('install');
$url    = $cli->getArgWithVal('url');

$config = new Config();

if($name && $url){
    Text::print("Installing new Extension '{yel}$name{end}' from url '{yel}$url{end}'\n");
    try{
		$extension = new Extension($config);
		if($extension->install($name, $url)){
		    Script::success("Extension '$name' was installed");
        }else{
		    Script::failure("Extension '$name' failed to install");
        }
    }catch(DirectoryExistsException $e){
		Script::failure("Can't install extension '$name' because there is already an extension installed with that name");
    }
}

if($name = $cli->getArgWithVal("uninstall")){
    Text::print("Uninstalling extension '$name'\n");

    try{
        $extension = new Extension($config);
        if($extension->uninstall($name)){
            Script::success("Extension '$name' was uninstalled");
        }else{
            Script::failure("Extension '$name' has failed to uninstall");
        }
    }catch(DirectoryMissingException $e){
        Script::failure("Can't uninstall extension '$name' as the directory that it was expected to be in was missing");
    }
}

exit(0);
