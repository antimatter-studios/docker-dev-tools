#!/usr/bin/env php
<?php declare(strict_types=1);
$showErrors = true;
$cli = require_once(__DIR__.'/../src/init.php');

$config = new SystemConfig();

Script::title("DDT EXTENSION CONFIGURATOR", "Install new Batteries");

function help(CLI $cli) {
    $script = $cli->getScript(false);

    Text::print(<<<EOF
    {yel}Usage Example:{end} $script {yel}--install=name --url=https://github.com/something/extension_repo.git{end}

    {blu}Description:{end}
        This tool will manage extensions installed within the tools. It can install or uninstall them. At this time
        the tool only supports extensions from GIT repositories
        
    {blu}Options:{end}
        --install=XXX: Will install a new extension using the parameters value as the given name
        --url=XXX: Will use this location to install the extension, only git repositories are supported
        --uninstall=XXX: Will uninstall an extension with the given name
        --list: Will list the installed extensions
        --update: Will update all extensions from their repository urls given during installation
        

EOF
    );

    exit(0);
}


if($cli->hasArg('help') || $cli->countArgs() === 0){
    help($cli);
}

$name   = $cli->getArgWithVal('install');
$url    = $cli->getArgWithVal('url');

$config = new SystemConfig();

if($name && $url){
    Text::print("Installing new Extension '{yel}$name{end}' from url '{yel}$url{end}'\n");
    try{
		$extension = new Extension($config);
		if($extension->install($name, $url)){
		    Script::success("Extension '$name' was installed");
        }else{
		    Script::failure("Extension '$name' failed to install");
        }
    }catch(DirectoryExistsException $e){
		Script::failure("Can't install extension '$name' because there is already an extension installed with that name");
    }
}

if($name = $cli->getArgWithVal("uninstall")){
    Text::print("Uninstalling extension '$name'\n");

    try{
        $extension = new Extension($config);
        if($extension->uninstall($name)){
            Script::success("Extension '$name' was uninstalled");
        }else{
            Script::failure("Extension '$name' has failed to uninstall");
        }
    }catch(DirectoryMissingException $e){
        Script::failure("Can't uninstall extension '$name' as the directory that it was expected to be in was missing");
    }
}

if($cli->hasArg(["list-extension", "list-extensions"])){
    $extension = new Extension($config);
    $extension->list();
}

exit(0);
